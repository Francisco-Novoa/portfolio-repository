{"version":3,"sources":["row.js","App.js","serviceWorker.js","index.js"],"names":["Row","props","handleClick","console","log","elem","url","setSong","setCurrentSong","i","currentSong","className","onClick","style","fontWeight","name","App","useState","songs","store","setStore","song","player","useRef","useEffect","a","fetch","method","headers","all","json","data","getAllSongs","current","src","load","play","map","key","ref","length","paused","pause","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1cba4792.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport default function Row(props){\r\n    const handleClick=()=>{\r\n        console.log(\"https://assets.breatheco.de/apis/sound/\"+props.elem.url)\r\n        props.setSong(\"https://assets.breatheco.de/apis/sound/\"+props.elem.url)\r\n        props.setCurrentSong(props.i)\r\n    }\r\n    return(\r\n        <>\r\n\r\n        {   props.currentSong===props.i? \r\n\r\n        <button className=\"list-group-item list-group-item-action list-group-item-dark bg-dark text-white\"\r\n        onClick={()=>{handleClick()}}>\r\n\r\n            <span style={{fontWeight: \"bold\"}}> {props.i} </span>\r\n            <span style={{fontWeight: \"bold\"}} >- </span>\r\n            <span >{props.elem.name}</span>\r\n\r\n        </button>\r\n\r\n        :\r\n\r\n        <button className=\"list-group-item list-group-item-action list-group-item-dark\"\r\n        onClick={()=>{handleClick()}}>\r\n\r\n            <span style={{fontWeight: \"bold\"}}> {props.i} </span>\r\n            <span style={{fontWeight: \"bold\"}} >- </span>\r\n            <span >{props.elem.name}</span>\r\n\r\n        </button>\r\n        \r\n        }\r\n        </>\r\n    )\r\n}","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport Row from \"./row\"\n\n\nexport default function App() {\n  \n  const [store, setStore] = useState({ songs: [] })\n  const [song, setSong] = useState(null)\n  const [currentSong, setCurrentSong] = useState(null)\n  const player = useRef(null)\n\n  const handleNextSong = () => {\n    if (currentSong === null && store.songs !== []) {\n      setCurrentSong(0)\n      setSong(\"https://assets.breatheco.de/apis/sound/\" + store.songs[0].url)\n\n    }\n    else if (store.songs !== [] && currentSong < store.songs.length - 1) {\n      setSong(\"https://assets.breatheco.de/apis/sound/\" + store.songs[currentSong+1].url)\n      setCurrentSong(currentSong + 1)\n    }\n    else if (store.songs !== [] && currentSong === store.songs.length - 1) {\n      setCurrentSong(0)\n      setSong(\"https://assets.breatheco.de/apis/sound/\" + store.songs[0].url)\n    }\n  }\n\n  const handlePreviousSong = () => {\n    if (currentSong === null && store.songs !== []) {\n      setCurrentSong(store.songs.length - 1)\n      setSong(\"https://assets.breatheco.de/apis/sound/\" + store.songs[0].url)\n\n    }\n    else if (store.songs !== [] && currentSong > 0) {\n      setSong(\"https://assets.breatheco.de/apis/sound/\" + store.songs[currentSong-1].url)\n      setCurrentSong(currentSong - 1)\n\n    }\n    else if (store.songs !== [] && currentSong === 0) {\n      setCurrentSong(store.songs.length - 1)\n      setSong(\"https://assets.breatheco.de/apis/sound/\" + store.songs[currentSong].url)\n    }\n  }\n\n  const handlePlay = () => {\n    if (player.current.paused) {\n      player.current.load()\n      player.current.play()\n    }\n    else {\n      player.current.pause()\n    }\n  }\n\n  useEffect(() => {\n    const getAllSongs = async (url) => {\n      try {\n        const all = await fetch(url, {\n          method: \"GET\",\n          headers: { \"Content-Type\": \"application/json\" },\n        })\n        const data = await all.json()\n        setStore({ ...store, songs: data })\n      }\n      catch (error) {\n        console.log(error)\n      }\n    }\n    getAllSongs(\"https://assets.breatheco.de/apis/sound/songs\")\n  }, [])\n\n  useEffect(() => {\n    if (player !== null) {\n      player.current.src = song\n      player.current.load()\n      player.current.play()\n    }\n  }, [currentSong])\n\n  return (\n\n    <div className=\"container-fluid\">\n\n      {/* list */}\n\n      <div className=\"row\">\n        <div className=\"col\">\n          <ul className=\"list-group\">\n\n            {\n              store.songs !== [] ?\n                store.songs.map((elem, i) => {\n                  return (\n                    <Row elem={elem} key={i} i={i} setSong={setSong} setCurrentSong={setCurrentSong} currentSong={currentSong} />\n                  )\n                })\n                : <span>Cargando!!!</span>\n            }\n\n            <audio ref={player} ></audio>\n\n          </ul>\n        </div>\n      </div>\n\n      {/* controls */}\n\n      <div className=\"row d-flex justify-content-between controls\">\n        <div className=\"col-2\"><i className=\"btn btn-block btn-dark fas fa-step-backward\" onClick={() => { handlePreviousSong() }}></i></div>\n        <div className=\"col-2\"><i className=\"btn btn-block btn-dark fas fa-play\" onClick={() => { handlePlay() }}></i></div>\n        <div className=\"col-2\"><i className=\"btn btn-block btn-dark fas fa-step-forward\" onClick={() => { handleNextSong() }} ></i></div>\n      </div>\n\n    </div>\n  )\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n// Add css files\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import 'font-awesome/css/font-awesome.min.css'; // 4.x\nimport '@fortawesome/fontawesome-free/css/all.css'; // 5.x\n\n\n// Add js files\nimport 'jquery';\nimport 'popper.js';\nimport 'bootstrap';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}